
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015f8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001780  08001780  00002780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001790  08001790  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  08001790  08001790  00002790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001798  08001798  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001798  08001798  00002798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800179c  0800179c  0000279c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080017a0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000300c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0000300c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0000300c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003895  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e05  00000000  00000000  000068d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003f0  00000000  00000000  000076d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000368  00000000  00000000  00007ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ed3a  00000000  00000000  00007e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004985  00000000  00000000  00026b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbd9e  00000000  00000000  0002b4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e728d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e14  00000000  00000000  000e72e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000d5  00000000  00000000  000e80f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b80c 	b.w	80001b8 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f001 f980 	bl	80014ac <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__aeabi_idiv0>:
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop

080001bc <deregister_tm_clones>:
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <deregister_tm_clones+0x10>)
 80001be:	4b04      	ldr	r3, [pc, #16]	@ (80001d0 <deregister_tm_clones+0x14>)
 80001c0:	4283      	cmp	r3, r0
 80001c2:	d002      	beq.n	80001ca <deregister_tm_clones+0xe>
 80001c4:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <deregister_tm_clones+0x18>)
 80001c6:	b103      	cbz	r3, 80001ca <deregister_tm_clones+0xe>
 80001c8:	4718      	bx	r3
 80001ca:	4770      	bx	lr
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	2000000c 	.word	0x2000000c
 80001d4:	00000000 	.word	0x00000000

080001d8 <register_tm_clones>:
 80001d8:	4805      	ldr	r0, [pc, #20]	@ (80001f0 <register_tm_clones+0x18>)
 80001da:	4b06      	ldr	r3, [pc, #24]	@ (80001f4 <register_tm_clones+0x1c>)
 80001dc:	1a1b      	subs	r3, r3, r0
 80001de:	0fd9      	lsrs	r1, r3, #31
 80001e0:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001e4:	1049      	asrs	r1, r1, #1
 80001e6:	d002      	beq.n	80001ee <register_tm_clones+0x16>
 80001e8:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <register_tm_clones+0x20>)
 80001ea:	b103      	cbz	r3, 80001ee <register_tm_clones+0x16>
 80001ec:	4718      	bx	r3
 80001ee:	4770      	bx	lr
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	2000000c 	.word	0x2000000c
 80001f8:	00000000 	.word	0x00000000

080001fc <__do_global_dtors_aux>:
 80001fc:	b510      	push	{r4, lr}
 80001fe:	4c06      	ldr	r4, [pc, #24]	@ (8000218 <__do_global_dtors_aux+0x1c>)
 8000200:	7823      	ldrb	r3, [r4, #0]
 8000202:	b943      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x1a>
 8000204:	f7ff ffda 	bl	80001bc <deregister_tm_clones>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x20>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x16>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x24>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000000c 	.word	0x2000000c
 800021c:	00000000 	.word	0x00000000
 8000220:	08001768 	.word	0x08001768

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b05      	ldr	r3, [pc, #20]	@ (800023c <frame_dummy+0x18>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4905      	ldr	r1, [pc, #20]	@ (8000240 <frame_dummy+0x1c>)
 800022c:	4805      	ldr	r0, [pc, #20]	@ (8000244 <frame_dummy+0x20>)
 800022e:	f3af 8000 	nop.w
 8000232:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000236:	f7ff bfcf 	b.w	80001d8 <register_tm_clones>
 800023a:	bf00      	nop
 800023c:	00000000 	.word	0x00000000
 8000240:	20000010 	.word	0x20000010
 8000244:	08001768 	.word	0x08001768

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024c:	f000 f952 	bl	80004f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000250:	f000 f80e 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000254:	f000 f876 	bl	8000344 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 8000258:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800025c:	4803      	ldr	r0, [pc, #12]	@ (800026c <main+0x24>)
 800025e:	f000 fc7a 	bl	8000b56 <HAL_GPIO_TogglePin>
	 	  HAL_Delay(1000);
 8000262:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000266:	f000 f9b7 	bl	80005d8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 800026a:	e7f5      	b.n	8000258 <main+0x10>
 800026c:	40020c00 	.word	0x40020c00

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b094      	sub	sp, #80	@ 0x50
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 0320 	add.w	r3, r7, #32
 800027a:	2230      	movs	r2, #48	@ 0x30
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f001 f8e8 	bl	8001454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	f107 030c 	add.w	r3, r7, #12
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
 8000292:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000294:	2300      	movs	r3, #0
 8000296:	60bb      	str	r3, [r7, #8]
 8000298:	4b28      	ldr	r3, [pc, #160]	@ (800033c <SystemClock_Config+0xcc>)
 800029a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800029c:	4a27      	ldr	r2, [pc, #156]	@ (800033c <SystemClock_Config+0xcc>)
 800029e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80002a4:	4b25      	ldr	r3, [pc, #148]	@ (800033c <SystemClock_Config+0xcc>)
 80002a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80002ac:	60bb      	str	r3, [r7, #8]
 80002ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002b0:	2300      	movs	r3, #0
 80002b2:	607b      	str	r3, [r7, #4]
 80002b4:	4b22      	ldr	r3, [pc, #136]	@ (8000340 <SystemClock_Config+0xd0>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a21      	ldr	r2, [pc, #132]	@ (8000340 <SystemClock_Config+0xd0>)
 80002ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80002be:	6013      	str	r3, [r2, #0]
 80002c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000340 <SystemClock_Config+0xd0>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002cc:	2301      	movs	r3, #1
 80002ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	2302      	movs	r3, #2
 80002d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80002de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80002e0:	2308      	movs	r3, #8
 80002e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80002e4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80002e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002ea:	2302      	movs	r3, #2
 80002ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80002ee:	2307      	movs	r3, #7
 80002f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	f107 0320 	add.w	r3, r7, #32
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 fc48 	bl	8000b8c <HAL_RCC_OscConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000302:	f000 f863 	bl	80003cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000306:	230f      	movs	r3, #15
 8000308:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030a:	2302      	movs	r3, #2
 800030c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000312:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000316:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000318:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800031c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800031e:	f107 030c 	add.w	r3, r7, #12
 8000322:	2105      	movs	r1, #5
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fea9 	bl	800107c <HAL_RCC_ClockConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000330:	f000 f84c 	bl	80003cc <Error_Handler>
  }
}
 8000334:	bf00      	nop
 8000336:	3750      	adds	r7, #80	@ 0x50
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	40023800 	.word	0x40023800
 8000340:	40007000 	.word	0x40007000

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	f107 030c 	add.w	r3, r7, #12
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800035a:	2300      	movs	r3, #0
 800035c:	60bb      	str	r3, [r7, #8]
 800035e:	4b19      	ldr	r3, [pc, #100]	@ (80003c4 <MX_GPIO_Init+0x80>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000362:	4a18      	ldr	r2, [pc, #96]	@ (80003c4 <MX_GPIO_Init+0x80>)
 8000364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000368:	6313      	str	r3, [r2, #48]	@ 0x30
 800036a:	4b16      	ldr	r3, [pc, #88]	@ (80003c4 <MX_GPIO_Init+0x80>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000372:	60bb      	str	r3, [r7, #8]
 8000374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000376:	2300      	movs	r3, #0
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	4b12      	ldr	r3, [pc, #72]	@ (80003c4 <MX_GPIO_Init+0x80>)
 800037c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037e:	4a11      	ldr	r2, [pc, #68]	@ (80003c4 <MX_GPIO_Init+0x80>)
 8000380:	f043 0308 	orr.w	r3, r3, #8
 8000384:	6313      	str	r3, [r2, #48]	@ 0x30
 8000386:	4b0f      	ldr	r3, [pc, #60]	@ (80003c4 <MX_GPIO_Init+0x80>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038a:	f003 0308 	and.w	r3, r3, #8
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000398:	480b      	ldr	r0, [pc, #44]	@ (80003c8 <MX_GPIO_Init+0x84>)
 800039a:	f000 fbc3 	bl	8000b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800039e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a4:	2301      	movs	r3, #1
 80003a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a8:	2300      	movs	r3, #0
 80003aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ac:	2300      	movs	r3, #0
 80003ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003b0:	f107 030c 	add.w	r3, r7, #12
 80003b4:	4619      	mov	r1, r3
 80003b6:	4804      	ldr	r0, [pc, #16]	@ (80003c8 <MX_GPIO_Init+0x84>)
 80003b8:	f000 fa18 	bl	80007ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003bc:	bf00      	nop
 80003be:	3720      	adds	r7, #32
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40023800 	.word	0x40023800
 80003c8:	40020c00 	.word	0x40020c00

080003cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d0:	b672      	cpsid	i
}
 80003d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d4:	e7fe      	b.n	80003d4 <Error_Handler+0x8>
	...

080003d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003de:	2300      	movs	r3, #0
 80003e0:	607b      	str	r3, [r7, #4]
 80003e2:	4b10      	ldr	r3, [pc, #64]	@ (8000424 <HAL_MspInit+0x4c>)
 80003e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000424 <HAL_MspInit+0x4c>)
 80003e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80003ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000424 <HAL_MspInit+0x4c>)
 80003f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fa:	2300      	movs	r3, #0
 80003fc:	603b      	str	r3, [r7, #0]
 80003fe:	4b09      	ldr	r3, [pc, #36]	@ (8000424 <HAL_MspInit+0x4c>)
 8000400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000402:	4a08      	ldr	r2, [pc, #32]	@ (8000424 <HAL_MspInit+0x4c>)
 8000404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000408:	6413      	str	r3, [r2, #64]	@ 0x40
 800040a:	4b06      	ldr	r3, [pc, #24]	@ (8000424 <HAL_MspInit+0x4c>)
 800040c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800040e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000412:	603b      	str	r3, [r7, #0]
 8000414:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000416:	2007      	movs	r0, #7
 8000418:	f000 f9b4 	bl	8000784 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800041c:	bf00      	nop
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40023800 	.word	0x40023800

08000428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800042c:	e7fe      	b.n	800042c <NMI_Handler+0x4>

0800042e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <HardFault_Handler+0x4>

08000434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <MemManage_Handler+0x4>

0800043a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <BusFault_Handler+0x4>

08000440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <UsageFault_Handler+0x4>

08000446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr

08000462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000474:	f000 f890 	bl	8000598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}

0800047c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000480:	4b06      	ldr	r3, [pc, #24]	@ (800049c <SystemInit+0x20>)
 8000482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000486:	4a05      	ldr	r2, [pc, #20]	@ (800049c <SystemInit+0x20>)
 8000488:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800048c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	e000ed00 	.word	0xe000ed00

080004a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80004a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80004d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004a4:	480d      	ldr	r0, [pc, #52]	@ (80004dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004a6:	490e      	ldr	r1, [pc, #56]	@ (80004e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004a8:	4a0e      	ldr	r2, [pc, #56]	@ (80004e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ac:	e002      	b.n	80004b4 <LoopCopyDataInit>

080004ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004b2:	3304      	adds	r3, #4

080004b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b8:	d3f9      	bcc.n	80004ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ba:	4a0b      	ldr	r2, [pc, #44]	@ (80004e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004bc:	4c0b      	ldr	r4, [pc, #44]	@ (80004ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c0:	e001      	b.n	80004c6 <LoopFillZerobss>

080004c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c4:	3204      	adds	r2, #4

080004c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c8:	d3fb      	bcc.n	80004c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80004ca:	f7ff ffd7 	bl	800047c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004ce:	f000 ffc9 	bl	8001464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004d2:	f7ff feb9 	bl	8000248 <main>
  bx  lr    
 80004d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80004d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004e4:	080017a0 	.word	0x080017a0
  ldr r2, =_sbss
 80004e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004ec:	2000002c 	.word	0x2000002c

080004f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004f0:	e7fe      	b.n	80004f0 <ADC_IRQHandler>
	...

080004f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000534 <HAL_Init+0x40>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000534 <HAL_Init+0x40>)
 80004fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000502:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000504:	4b0b      	ldr	r3, [pc, #44]	@ (8000534 <HAL_Init+0x40>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a0a      	ldr	r2, [pc, #40]	@ (8000534 <HAL_Init+0x40>)
 800050a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800050e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000510:	4b08      	ldr	r3, [pc, #32]	@ (8000534 <HAL_Init+0x40>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a07      	ldr	r2, [pc, #28]	@ (8000534 <HAL_Init+0x40>)
 8000516:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800051a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f931 	bl	8000784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f000 f808 	bl	8000538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000528:	f7ff ff56 	bl	80003d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800052c:	2300      	movs	r3, #0
}
 800052e:	4618      	mov	r0, r3
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40023c00 	.word	0x40023c00

08000538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000540:	4b12      	ldr	r3, [pc, #72]	@ (800058c <HAL_InitTick+0x54>)
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	4b12      	ldr	r3, [pc, #72]	@ (8000590 <HAL_InitTick+0x58>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	4619      	mov	r1, r3
 800054a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800054e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000552:	fbb2 f3f3 	udiv	r3, r2, r3
 8000556:	4618      	mov	r0, r3
 8000558:	f000 f93b 	bl	80007d2 <HAL_SYSTICK_Config>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000562:	2301      	movs	r3, #1
 8000564:	e00e      	b.n	8000584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2b0f      	cmp	r3, #15
 800056a:	d80a      	bhi.n	8000582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800056c:	2200      	movs	r2, #0
 800056e:	6879      	ldr	r1, [r7, #4]
 8000570:	f04f 30ff 	mov.w	r0, #4294967295
 8000574:	f000 f911 	bl	800079a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000578:	4a06      	ldr	r2, [pc, #24]	@ (8000594 <HAL_InitTick+0x5c>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800057e:	2300      	movs	r3, #0
 8000580:	e000      	b.n	8000584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000582:	2301      	movs	r3, #1
}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000000 	.word	0x20000000
 8000590:	20000008 	.word	0x20000008
 8000594:	20000004 	.word	0x20000004

08000598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800059c:	4b06      	ldr	r3, [pc, #24]	@ (80005b8 <HAL_IncTick+0x20>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <HAL_IncTick+0x24>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4413      	add	r3, r2
 80005a8:	4a04      	ldr	r2, [pc, #16]	@ (80005bc <HAL_IncTick+0x24>)
 80005aa:	6013      	str	r3, [r2, #0]
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000008 	.word	0x20000008
 80005bc:	20000028 	.word	0x20000028

080005c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  return uwTick;
 80005c4:	4b03      	ldr	r3, [pc, #12]	@ (80005d4 <HAL_GetTick+0x14>)
 80005c6:	681b      	ldr	r3, [r3, #0]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000028 	.word	0x20000028

080005d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e0:	f7ff ffee 	bl	80005c0 <HAL_GetTick>
 80005e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f0:	d005      	beq.n	80005fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005f2:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <HAL_Delay+0x44>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	461a      	mov	r2, r3
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4413      	add	r3, r2
 80005fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005fe:	bf00      	nop
 8000600:	f7ff ffde 	bl	80005c0 <HAL_GetTick>
 8000604:	4602      	mov	r2, r0
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	429a      	cmp	r2, r3
 800060e:	d8f7      	bhi.n	8000600 <HAL_Delay+0x28>
  {
  }
}
 8000610:	bf00      	nop
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000008 	.word	0x20000008

08000620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f003 0307 	and.w	r3, r3, #7
 800062e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000630:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <__NVIC_SetPriorityGrouping+0x44>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800063c:	4013      	ands	r3, r2
 800063e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000648:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800064c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000652:	4a04      	ldr	r2, [pc, #16]	@ (8000664 <__NVIC_SetPriorityGrouping+0x44>)
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	60d3      	str	r3, [r2, #12]
}
 8000658:	bf00      	nop
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800066c:	4b04      	ldr	r3, [pc, #16]	@ (8000680 <__NVIC_GetPriorityGrouping+0x18>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	0a1b      	lsrs	r3, r3, #8
 8000672:	f003 0307 	and.w	r3, r3, #7
}
 8000676:	4618      	mov	r0, r3
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	6039      	str	r1, [r7, #0]
 800068e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000694:	2b00      	cmp	r3, #0
 8000696:	db0a      	blt.n	80006ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	b2da      	uxtb	r2, r3
 800069c:	490c      	ldr	r1, [pc, #48]	@ (80006d0 <__NVIC_SetPriority+0x4c>)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	0112      	lsls	r2, r2, #4
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	440b      	add	r3, r1
 80006a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ac:	e00a      	b.n	80006c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4908      	ldr	r1, [pc, #32]	@ (80006d4 <__NVIC_SetPriority+0x50>)
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	f003 030f 	and.w	r3, r3, #15
 80006ba:	3b04      	subs	r3, #4
 80006bc:	0112      	lsls	r2, r2, #4
 80006be:	b2d2      	uxtb	r2, r2
 80006c0:	440b      	add	r3, r1
 80006c2:	761a      	strb	r2, [r3, #24]
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000e100 	.word	0xe000e100
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d8:	b480      	push	{r7}
 80006da:	b089      	sub	sp, #36	@ 0x24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	f1c3 0307 	rsb	r3, r3, #7
 80006f2:	2b04      	cmp	r3, #4
 80006f4:	bf28      	it	cs
 80006f6:	2304      	movcs	r3, #4
 80006f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	3304      	adds	r3, #4
 80006fe:	2b06      	cmp	r3, #6
 8000700:	d902      	bls.n	8000708 <NVIC_EncodePriority+0x30>
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	3b03      	subs	r3, #3
 8000706:	e000      	b.n	800070a <NVIC_EncodePriority+0x32>
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	f04f 32ff 	mov.w	r2, #4294967295
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	fa02 f303 	lsl.w	r3, r2, r3
 8000716:	43da      	mvns	r2, r3
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	401a      	ands	r2, r3
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000720:	f04f 31ff 	mov.w	r1, #4294967295
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	fa01 f303 	lsl.w	r3, r1, r3
 800072a:	43d9      	mvns	r1, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	4313      	orrs	r3, r2
         );
}
 8000732:	4618      	mov	r0, r3
 8000734:	3724      	adds	r7, #36	@ 0x24
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
	...

08000740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3b01      	subs	r3, #1
 800074c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000750:	d301      	bcc.n	8000756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000752:	2301      	movs	r3, #1
 8000754:	e00f      	b.n	8000776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000756:	4a0a      	ldr	r2, [pc, #40]	@ (8000780 <SysTick_Config+0x40>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800075e:	210f      	movs	r1, #15
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	f7ff ff8e 	bl	8000684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000768:	4b05      	ldr	r3, [pc, #20]	@ (8000780 <SysTick_Config+0x40>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076e:	4b04      	ldr	r3, [pc, #16]	@ (8000780 <SysTick_Config+0x40>)
 8000770:	2207      	movs	r2, #7
 8000772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	e000e010 	.word	0xe000e010

08000784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff ff47 	bl	8000620 <__NVIC_SetPriorityGrouping>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800079a:	b580      	push	{r7, lr}
 800079c:	b086      	sub	sp, #24
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4603      	mov	r3, r0
 80007a2:	60b9      	str	r1, [r7, #8]
 80007a4:	607a      	str	r2, [r7, #4]
 80007a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007ac:	f7ff ff5c 	bl	8000668 <__NVIC_GetPriorityGrouping>
 80007b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	68b9      	ldr	r1, [r7, #8]
 80007b6:	6978      	ldr	r0, [r7, #20]
 80007b8:	f7ff ff8e 	bl	80006d8 <NVIC_EncodePriority>
 80007bc:	4602      	mov	r2, r0
 80007be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff5d 	bl	8000684 <__NVIC_SetPriority>
}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff ffb0 	bl	8000740 <SysTick_Config>
 80007e0:	4603      	mov	r3, r0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b089      	sub	sp, #36	@ 0x24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
 8000806:	e16b      	b.n	8000ae0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000808:	2201      	movs	r2, #1
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	697a      	ldr	r2, [r7, #20]
 8000818:	4013      	ands	r3, r2
 800081a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800081c:	693a      	ldr	r2, [r7, #16]
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	429a      	cmp	r2, r3
 8000822:	f040 815a 	bne.w	8000ada <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	f003 0303 	and.w	r3, r3, #3
 800082e:	2b01      	cmp	r3, #1
 8000830:	d005      	beq.n	800083e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800083a:	2b02      	cmp	r3, #2
 800083c:	d130      	bne.n	80008a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	2203      	movs	r2, #3
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	43db      	mvns	r3, r3
 8000850:	69ba      	ldr	r2, [r7, #24]
 8000852:	4013      	ands	r3, r2
 8000854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	68da      	ldr	r2, [r3, #12]
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	69ba      	ldr	r2, [r7, #24]
 8000864:	4313      	orrs	r3, r2
 8000866:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	69ba      	ldr	r2, [r7, #24]
 800086c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000874:	2201      	movs	r2, #1
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	43db      	mvns	r3, r3
 800087e:	69ba      	ldr	r2, [r7, #24]
 8000880:	4013      	ands	r3, r2
 8000882:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	091b      	lsrs	r3, r3, #4
 800088a:	f003 0201 	and.w	r2, r3, #1
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	69ba      	ldr	r2, [r7, #24]
 8000896:	4313      	orrs	r3, r2
 8000898:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	69ba      	ldr	r2, [r7, #24]
 800089e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f003 0303 	and.w	r3, r3, #3
 80008a8:	2b03      	cmp	r3, #3
 80008aa:	d017      	beq.n	80008dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	2203      	movs	r2, #3
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	69ba      	ldr	r2, [r7, #24]
 80008c0:	4013      	ands	r3, r2
 80008c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	689a      	ldr	r2, [r3, #8]
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	69ba      	ldr	r2, [r7, #24]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	69ba      	ldr	r2, [r7, #24]
 80008da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	f003 0303 	and.w	r3, r3, #3
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d123      	bne.n	8000930 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	08da      	lsrs	r2, r3, #3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3208      	adds	r2, #8
 80008f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	f003 0307 	and.w	r3, r3, #7
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	220f      	movs	r2, #15
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	43db      	mvns	r3, r3
 8000906:	69ba      	ldr	r2, [r7, #24]
 8000908:	4013      	ands	r3, r2
 800090a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	691a      	ldr	r2, [r3, #16]
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	4313      	orrs	r3, r2
 8000920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	08da      	lsrs	r2, r3, #3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3208      	adds	r2, #8
 800092a:	69b9      	ldr	r1, [r7, #24]
 800092c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	2203      	movs	r2, #3
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	69ba      	ldr	r2, [r7, #24]
 8000944:	4013      	ands	r3, r2
 8000946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f003 0203 	and.w	r2, r3, #3
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	4313      	orrs	r3, r2
 800095c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800096c:	2b00      	cmp	r3, #0
 800096e:	f000 80b4 	beq.w	8000ada <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b60      	ldr	r3, [pc, #384]	@ (8000af8 <HAL_GPIO_Init+0x30c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097a:	4a5f      	ldr	r2, [pc, #380]	@ (8000af8 <HAL_GPIO_Init+0x30c>)
 800097c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000980:	6453      	str	r3, [r2, #68]	@ 0x44
 8000982:	4b5d      	ldr	r3, [pc, #372]	@ (8000af8 <HAL_GPIO_Init+0x30c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800098e:	4a5b      	ldr	r2, [pc, #364]	@ (8000afc <HAL_GPIO_Init+0x310>)
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	089b      	lsrs	r3, r3, #2
 8000994:	3302      	adds	r3, #2
 8000996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800099a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	f003 0303 	and.w	r3, r3, #3
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	220f      	movs	r2, #15
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	43db      	mvns	r3, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	4013      	ands	r3, r2
 80009b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a52      	ldr	r2, [pc, #328]	@ (8000b00 <HAL_GPIO_Init+0x314>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d02b      	beq.n	8000a12 <HAL_GPIO_Init+0x226>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a51      	ldr	r2, [pc, #324]	@ (8000b04 <HAL_GPIO_Init+0x318>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d025      	beq.n	8000a0e <HAL_GPIO_Init+0x222>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a50      	ldr	r2, [pc, #320]	@ (8000b08 <HAL_GPIO_Init+0x31c>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d01f      	beq.n	8000a0a <HAL_GPIO_Init+0x21e>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a4f      	ldr	r2, [pc, #316]	@ (8000b0c <HAL_GPIO_Init+0x320>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d019      	beq.n	8000a06 <HAL_GPIO_Init+0x21a>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a4e      	ldr	r2, [pc, #312]	@ (8000b10 <HAL_GPIO_Init+0x324>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d013      	beq.n	8000a02 <HAL_GPIO_Init+0x216>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a4d      	ldr	r2, [pc, #308]	@ (8000b14 <HAL_GPIO_Init+0x328>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d00d      	beq.n	80009fe <HAL_GPIO_Init+0x212>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a4c      	ldr	r2, [pc, #304]	@ (8000b18 <HAL_GPIO_Init+0x32c>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d007      	beq.n	80009fa <HAL_GPIO_Init+0x20e>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a4b      	ldr	r2, [pc, #300]	@ (8000b1c <HAL_GPIO_Init+0x330>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d101      	bne.n	80009f6 <HAL_GPIO_Init+0x20a>
 80009f2:	2307      	movs	r3, #7
 80009f4:	e00e      	b.n	8000a14 <HAL_GPIO_Init+0x228>
 80009f6:	2308      	movs	r3, #8
 80009f8:	e00c      	b.n	8000a14 <HAL_GPIO_Init+0x228>
 80009fa:	2306      	movs	r3, #6
 80009fc:	e00a      	b.n	8000a14 <HAL_GPIO_Init+0x228>
 80009fe:	2305      	movs	r3, #5
 8000a00:	e008      	b.n	8000a14 <HAL_GPIO_Init+0x228>
 8000a02:	2304      	movs	r3, #4
 8000a04:	e006      	b.n	8000a14 <HAL_GPIO_Init+0x228>
 8000a06:	2303      	movs	r3, #3
 8000a08:	e004      	b.n	8000a14 <HAL_GPIO_Init+0x228>
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	e002      	b.n	8000a14 <HAL_GPIO_Init+0x228>
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e000      	b.n	8000a14 <HAL_GPIO_Init+0x228>
 8000a12:	2300      	movs	r3, #0
 8000a14:	69fa      	ldr	r2, [r7, #28]
 8000a16:	f002 0203 	and.w	r2, r2, #3
 8000a1a:	0092      	lsls	r2, r2, #2
 8000a1c:	4093      	lsls	r3, r2
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a24:	4935      	ldr	r1, [pc, #212]	@ (8000afc <HAL_GPIO_Init+0x310>)
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	089b      	lsrs	r3, r3, #2
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a32:	4b3b      	ldr	r3, [pc, #236]	@ (8000b20 <HAL_GPIO_Init+0x334>)
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d003      	beq.n	8000a56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a4e:	69ba      	ldr	r2, [r7, #24]
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a56:	4a32      	ldr	r2, [pc, #200]	@ (8000b20 <HAL_GPIO_Init+0x334>)
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a5c:	4b30      	ldr	r3, [pc, #192]	@ (8000b20 <HAL_GPIO_Init+0x334>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	43db      	mvns	r3, r3
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d003      	beq.n	8000a80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a78:	69ba      	ldr	r2, [r7, #24]
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a80:	4a27      	ldr	r2, [pc, #156]	@ (8000b20 <HAL_GPIO_Init+0x334>)
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a86:	4b26      	ldr	r3, [pc, #152]	@ (8000b20 <HAL_GPIO_Init+0x334>)
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	4013      	ands	r3, r2
 8000a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d003      	beq.n	8000aaa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000aa2:	69ba      	ldr	r2, [r7, #24]
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aaa:	4a1d      	ldr	r2, [pc, #116]	@ (8000b20 <HAL_GPIO_Init+0x334>)
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <HAL_GPIO_Init+0x334>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	4013      	ands	r3, r2
 8000abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d003      	beq.n	8000ad4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ad4:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <HAL_GPIO_Init+0x334>)
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3301      	adds	r3, #1
 8000ade:	61fb      	str	r3, [r7, #28]
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	2b0f      	cmp	r3, #15
 8000ae4:	f67f ae90 	bls.w	8000808 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3724      	adds	r7, #36	@ 0x24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40013800 	.word	0x40013800
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020400 	.word	0x40020400
 8000b08:	40020800 	.word	0x40020800
 8000b0c:	40020c00 	.word	0x40020c00
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40021400 	.word	0x40021400
 8000b18:	40021800 	.word	0x40021800
 8000b1c:	40021c00 	.word	0x40021c00
 8000b20:	40013c00 	.word	0x40013c00

08000b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	807b      	strh	r3, [r7, #2]
 8000b30:	4613      	mov	r3, r2
 8000b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b34:	787b      	ldrb	r3, [r7, #1]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b3a:	887a      	ldrh	r2, [r7, #2]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b40:	e003      	b.n	8000b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	041a      	lsls	r2, r3, #16
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	619a      	str	r2, [r3, #24]
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b085      	sub	sp, #20
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 8000b5e:	460b      	mov	r3, r1
 8000b60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b68:	887a      	ldrh	r2, [r7, #2]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	041a      	lsls	r2, r3, #16
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	43d9      	mvns	r1, r3
 8000b74:	887b      	ldrh	r3, [r7, #2]
 8000b76:	400b      	ands	r3, r1
 8000b78:	431a      	orrs	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	619a      	str	r2, [r3, #24]
}
 8000b7e:	bf00      	nop
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d101      	bne.n	8000b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e267      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d075      	beq.n	8000c96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000baa:	4b88      	ldr	r3, [pc, #544]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	f003 030c 	and.w	r3, r3, #12
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	d00c      	beq.n	8000bd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bb6:	4b85      	ldr	r3, [pc, #532]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bbe:	2b08      	cmp	r3, #8
 8000bc0:	d112      	bne.n	8000be8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bc2:	4b82      	ldr	r3, [pc, #520]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000bce:	d10b      	bne.n	8000be8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd0:	4b7e      	ldr	r3, [pc, #504]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d05b      	beq.n	8000c94 <HAL_RCC_OscConfig+0x108>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d157      	bne.n	8000c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e242      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bf0:	d106      	bne.n	8000c00 <HAL_RCC_OscConfig+0x74>
 8000bf2:	4b76      	ldr	r3, [pc, #472]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a75      	ldr	r2, [pc, #468]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	e01d      	b.n	8000c3c <HAL_RCC_OscConfig+0xb0>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c08:	d10c      	bne.n	8000c24 <HAL_RCC_OscConfig+0x98>
 8000c0a:	4b70      	ldr	r3, [pc, #448]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a6f      	ldr	r2, [pc, #444]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000c10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	4b6d      	ldr	r3, [pc, #436]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a6c      	ldr	r2, [pc, #432]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	e00b      	b.n	8000c3c <HAL_RCC_OscConfig+0xb0>
 8000c24:	4b69      	ldr	r3, [pc, #420]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a68      	ldr	r2, [pc, #416]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	4b66      	ldr	r3, [pc, #408]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a65      	ldr	r2, [pc, #404]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000c36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d013      	beq.n	8000c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c44:	f7ff fcbc 	bl	80005c0 <HAL_GetTick>
 8000c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c4a:	e008      	b.n	8000c5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c4c:	f7ff fcb8 	bl	80005c0 <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b64      	cmp	r3, #100	@ 0x64
 8000c58:	d901      	bls.n	8000c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e207      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d0f0      	beq.n	8000c4c <HAL_RCC_OscConfig+0xc0>
 8000c6a:	e014      	b.n	8000c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c6c:	f7ff fca8 	bl	80005c0 <HAL_GetTick>
 8000c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c72:	e008      	b.n	8000c86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c74:	f7ff fca4 	bl	80005c0 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	2b64      	cmp	r3, #100	@ 0x64
 8000c80:	d901      	bls.n	8000c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c82:	2303      	movs	r3, #3
 8000c84:	e1f3      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c86:	4b51      	ldr	r3, [pc, #324]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1f0      	bne.n	8000c74 <HAL_RCC_OscConfig+0xe8>
 8000c92:	e000      	b.n	8000c96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d063      	beq.n	8000d6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ca2:	4b4a      	ldr	r3, [pc, #296]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d00b      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cae:	4b47      	ldr	r3, [pc, #284]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cb6:	2b08      	cmp	r3, #8
 8000cb8:	d11c      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cba:	4b44      	ldr	r3, [pc, #272]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d116      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cc6:	4b41      	ldr	r3, [pc, #260]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d005      	beq.n	8000cde <HAL_RCC_OscConfig+0x152>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d001      	beq.n	8000cde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e1c7      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cde:	4b3b      	ldr	r3, [pc, #236]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	691b      	ldr	r3, [r3, #16]
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	4937      	ldr	r1, [pc, #220]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf2:	e03a      	b.n	8000d6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d020      	beq.n	8000d3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cfc:	4b34      	ldr	r3, [pc, #208]	@ (8000dd0 <HAL_RCC_OscConfig+0x244>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d02:	f7ff fc5d 	bl	80005c0 <HAL_GetTick>
 8000d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d08:	e008      	b.n	8000d1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d0a:	f7ff fc59 	bl	80005c0 <HAL_GetTick>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d901      	bls.n	8000d1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e1a8      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0f0      	beq.n	8000d0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d28:	4b28      	ldr	r3, [pc, #160]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	691b      	ldr	r3, [r3, #16]
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	4925      	ldr	r1, [pc, #148]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	600b      	str	r3, [r1, #0]
 8000d3c:	e015      	b.n	8000d6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d3e:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <HAL_RCC_OscConfig+0x244>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d44:	f7ff fc3c 	bl	80005c0 <HAL_GetTick>
 8000d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d4a:	e008      	b.n	8000d5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d4c:	f7ff fc38 	bl	80005c0 <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d901      	bls.n	8000d5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e187      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1f0      	bne.n	8000d4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d036      	beq.n	8000de4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d016      	beq.n	8000dac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d7e:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <HAL_RCC_OscConfig+0x248>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d84:	f7ff fc1c 	bl	80005c0 <HAL_GetTick>
 8000d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d8a:	e008      	b.n	8000d9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d8c:	f7ff fc18 	bl	80005c0 <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d901      	bls.n	8000d9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e167      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f0      	beq.n	8000d8c <HAL_RCC_OscConfig+0x200>
 8000daa:	e01b      	b.n	8000de4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dac:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <HAL_RCC_OscConfig+0x248>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000db2:	f7ff fc05 	bl	80005c0 <HAL_GetTick>
 8000db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db8:	e00e      	b.n	8000dd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dba:	f7ff fc01 	bl	80005c0 <HAL_GetTick>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d907      	bls.n	8000dd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e150      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	42470000 	.word	0x42470000
 8000dd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dd8:	4b88      	ldr	r3, [pc, #544]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1ea      	bne.n	8000dba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f000 8097 	beq.w	8000f20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000df6:	4b81      	ldr	r3, [pc, #516]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10f      	bne.n	8000e22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	4b7d      	ldr	r3, [pc, #500]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	4a7c      	ldr	r2, [pc, #496]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e12:	4b7a      	ldr	r3, [pc, #488]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e22:	4b77      	ldr	r3, [pc, #476]	@ (8001000 <HAL_RCC_OscConfig+0x474>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d118      	bne.n	8000e60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e2e:	4b74      	ldr	r3, [pc, #464]	@ (8001000 <HAL_RCC_OscConfig+0x474>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a73      	ldr	r2, [pc, #460]	@ (8001000 <HAL_RCC_OscConfig+0x474>)
 8000e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e3a:	f7ff fbc1 	bl	80005c0 <HAL_GetTick>
 8000e3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e40:	e008      	b.n	8000e54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e42:	f7ff fbbd 	bl	80005c0 <HAL_GetTick>
 8000e46:	4602      	mov	r2, r0
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d901      	bls.n	8000e54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e10c      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e54:	4b6a      	ldr	r3, [pc, #424]	@ (8001000 <HAL_RCC_OscConfig+0x474>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0f0      	beq.n	8000e42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d106      	bne.n	8000e76 <HAL_RCC_OscConfig+0x2ea>
 8000e68:	4b64      	ldr	r3, [pc, #400]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e6c:	4a63      	ldr	r2, [pc, #396]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e74:	e01c      	b.n	8000eb0 <HAL_RCC_OscConfig+0x324>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	2b05      	cmp	r3, #5
 8000e7c:	d10c      	bne.n	8000e98 <HAL_RCC_OscConfig+0x30c>
 8000e7e:	4b5f      	ldr	r3, [pc, #380]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e82:	4a5e      	ldr	r2, [pc, #376]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e8a:	4b5c      	ldr	r3, [pc, #368]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e8e:	4a5b      	ldr	r2, [pc, #364]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e96:	e00b      	b.n	8000eb0 <HAL_RCC_OscConfig+0x324>
 8000e98:	4b58      	ldr	r3, [pc, #352]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e9c:	4a57      	ldr	r2, [pc, #348]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000e9e:	f023 0301 	bic.w	r3, r3, #1
 8000ea2:	6713      	str	r3, [r2, #112]	@ 0x70
 8000ea4:	4b55      	ldr	r3, [pc, #340]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000ea8:	4a54      	ldr	r2, [pc, #336]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000eaa:	f023 0304 	bic.w	r3, r3, #4
 8000eae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d015      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eb8:	f7ff fb82 	bl	80005c0 <HAL_GetTick>
 8000ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ebe:	e00a      	b.n	8000ed6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ec0:	f7ff fb7e 	bl	80005c0 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d901      	bls.n	8000ed6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e0cb      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed6:	4b49      	ldr	r3, [pc, #292]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0ee      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x334>
 8000ee2:	e014      	b.n	8000f0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee4:	f7ff fb6c 	bl	80005c0 <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eea:	e00a      	b.n	8000f02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eec:	f7ff fb68 	bl	80005c0 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e0b5      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f02:	4b3e      	ldr	r3, [pc, #248]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1ee      	bne.n	8000eec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f0e:	7dfb      	ldrb	r3, [r7, #23]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d105      	bne.n	8000f20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f14:	4b39      	ldr	r3, [pc, #228]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f18:	4a38      	ldr	r2, [pc, #224]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000f1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f000 80a1 	beq.w	800106c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f2a:	4b34      	ldr	r3, [pc, #208]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f003 030c 	and.w	r3, r3, #12
 8000f32:	2b08      	cmp	r3, #8
 8000f34:	d05c      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d141      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f3e:	4b31      	ldr	r3, [pc, #196]	@ (8001004 <HAL_RCC_OscConfig+0x478>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f44:	f7ff fb3c 	bl	80005c0 <HAL_GetTick>
 8000f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f4a:	e008      	b.n	8000f5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f4c:	f7ff fb38 	bl	80005c0 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d901      	bls.n	8000f5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e087      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f5e:	4b27      	ldr	r3, [pc, #156]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1f0      	bne.n	8000f4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69da      	ldr	r2, [r3, #28]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	431a      	orrs	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f78:	019b      	lsls	r3, r3, #6
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f80:	085b      	lsrs	r3, r3, #1
 8000f82:	3b01      	subs	r3, #1
 8000f84:	041b      	lsls	r3, r3, #16
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f8c:	061b      	lsls	r3, r3, #24
 8000f8e:	491b      	ldr	r1, [pc, #108]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000f90:	4313      	orrs	r3, r2
 8000f92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f94:	4b1b      	ldr	r3, [pc, #108]	@ (8001004 <HAL_RCC_OscConfig+0x478>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9a:	f7ff fb11 	bl	80005c0 <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fa2:	f7ff fb0d 	bl	80005c0 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e05c      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fb4:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0f0      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x416>
 8000fc0:	e054      	b.n	800106c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fc2:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <HAL_RCC_OscConfig+0x478>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fafa 	bl	80005c0 <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fd0:	f7ff faf6 	bl	80005c0 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e045      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe2:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f0      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x444>
 8000fee:	e03d      	b.n	800106c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d107      	bne.n	8001008 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e038      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40007000 	.word	0x40007000
 8001004:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001008:	4b1b      	ldr	r3, [pc, #108]	@ (8001078 <HAL_RCC_OscConfig+0x4ec>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d028      	beq.n	8001068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001020:	429a      	cmp	r2, r3
 8001022:	d121      	bne.n	8001068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800102e:	429a      	cmp	r2, r3
 8001030:	d11a      	bne.n	8001068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001038:	4013      	ands	r3, r2
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800103e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001040:	4293      	cmp	r3, r2
 8001042:	d111      	bne.n	8001068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800104e:	085b      	lsrs	r3, r3, #1
 8001050:	3b01      	subs	r3, #1
 8001052:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001054:	429a      	cmp	r2, r3
 8001056:	d107      	bne.n	8001068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001062:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001064:	429a      	cmp	r2, r3
 8001066:	d001      	beq.n	800106c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800

0800107c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e0cc      	b.n	800122a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001090:	4b68      	ldr	r3, [pc, #416]	@ (8001234 <HAL_RCC_ClockConfig+0x1b8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d90c      	bls.n	80010b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800109e:	4b65      	ldr	r3, [pc, #404]	@ (8001234 <HAL_RCC_ClockConfig+0x1b8>)
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010a6:	4b63      	ldr	r3, [pc, #396]	@ (8001234 <HAL_RCC_ClockConfig+0x1b8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d001      	beq.n	80010b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e0b8      	b.n	800122a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d020      	beq.n	8001106 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d005      	beq.n	80010dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010d0:	4b59      	ldr	r3, [pc, #356]	@ (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	4a58      	ldr	r2, [pc, #352]	@ (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 80010d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80010da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0308 	and.w	r3, r3, #8
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d005      	beq.n	80010f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010e8:	4b53      	ldr	r3, [pc, #332]	@ (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	4a52      	ldr	r2, [pc, #328]	@ (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 80010ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80010f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010f4:	4b50      	ldr	r3, [pc, #320]	@ (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	494d      	ldr	r1, [pc, #308]	@ (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 8001102:	4313      	orrs	r3, r2
 8001104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	2b00      	cmp	r3, #0
 8001110:	d044      	beq.n	800119c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d107      	bne.n	800112a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111a:	4b47      	ldr	r3, [pc, #284]	@ (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d119      	bne.n	800115a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e07f      	b.n	800122a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b02      	cmp	r3, #2
 8001130:	d003      	beq.n	800113a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001136:	2b03      	cmp	r3, #3
 8001138:	d107      	bne.n	800114a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800113a:	4b3f      	ldr	r3, [pc, #252]	@ (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d109      	bne.n	800115a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e06f      	b.n	800122a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114a:	4b3b      	ldr	r3, [pc, #236]	@ (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e067      	b.n	800122a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800115a:	4b37      	ldr	r3, [pc, #220]	@ (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f023 0203 	bic.w	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4934      	ldr	r1, [pc, #208]	@ (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 8001168:	4313      	orrs	r3, r2
 800116a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800116c:	f7ff fa28 	bl	80005c0 <HAL_GetTick>
 8001170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001172:	e00a      	b.n	800118a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001174:	f7ff fa24 	bl	80005c0 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001182:	4293      	cmp	r3, r2
 8001184:	d901      	bls.n	800118a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e04f      	b.n	800122a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118a:	4b2b      	ldr	r3, [pc, #172]	@ (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 020c 	and.w	r2, r3, #12
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	429a      	cmp	r2, r3
 800119a:	d1eb      	bne.n	8001174 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800119c:	4b25      	ldr	r3, [pc, #148]	@ (8001234 <HAL_RCC_ClockConfig+0x1b8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d20c      	bcs.n	80011c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011aa:	4b22      	ldr	r3, [pc, #136]	@ (8001234 <HAL_RCC_ClockConfig+0x1b8>)
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011b2:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <HAL_RCC_ClockConfig+0x1b8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d001      	beq.n	80011c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e032      	b.n	800122a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d008      	beq.n	80011e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011d0:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	4916      	ldr	r1, [pc, #88]	@ (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d009      	beq.n	8001202 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011ee:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	490e      	ldr	r1, [pc, #56]	@ (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001202:	f000 f821 	bl	8001248 <HAL_RCC_GetSysClockFreq>
 8001206:	4602      	mov	r2, r0
 8001208:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	091b      	lsrs	r3, r3, #4
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	490a      	ldr	r1, [pc, #40]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 8001214:	5ccb      	ldrb	r3, [r1, r3]
 8001216:	fa22 f303 	lsr.w	r3, r2, r3
 800121a:	4a09      	ldr	r2, [pc, #36]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 800121c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800121e:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <HAL_RCC_ClockConfig+0x1c8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f988 	bl	8000538 <HAL_InitTick>

  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023c00 	.word	0x40023c00
 8001238:	40023800 	.word	0x40023800
 800123c:	08001780 	.word	0x08001780
 8001240:	20000000 	.word	0x20000000
 8001244:	20000004 	.word	0x20000004

08001248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800124c:	b094      	sub	sp, #80	@ 0x50
 800124e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	647b      	str	r3, [r7, #68]	@ 0x44
 8001254:	2300      	movs	r3, #0
 8001256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001258:	2300      	movs	r3, #0
 800125a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001260:	4b79      	ldr	r3, [pc, #484]	@ (8001448 <HAL_RCC_GetSysClockFreq+0x200>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f003 030c 	and.w	r3, r3, #12
 8001268:	2b08      	cmp	r3, #8
 800126a:	d00d      	beq.n	8001288 <HAL_RCC_GetSysClockFreq+0x40>
 800126c:	2b08      	cmp	r3, #8
 800126e:	f200 80e1 	bhi.w	8001434 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <HAL_RCC_GetSysClockFreq+0x34>
 8001276:	2b04      	cmp	r3, #4
 8001278:	d003      	beq.n	8001282 <HAL_RCC_GetSysClockFreq+0x3a>
 800127a:	e0db      	b.n	8001434 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800127c:	4b73      	ldr	r3, [pc, #460]	@ (800144c <HAL_RCC_GetSysClockFreq+0x204>)
 800127e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001280:	e0db      	b.n	800143a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001282:	4b73      	ldr	r3, [pc, #460]	@ (8001450 <HAL_RCC_GetSysClockFreq+0x208>)
 8001284:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001286:	e0d8      	b.n	800143a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001288:	4b6f      	ldr	r3, [pc, #444]	@ (8001448 <HAL_RCC_GetSysClockFreq+0x200>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001290:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001292:	4b6d      	ldr	r3, [pc, #436]	@ (8001448 <HAL_RCC_GetSysClockFreq+0x200>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d063      	beq.n	8001366 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800129e:	4b6a      	ldr	r3, [pc, #424]	@ (8001448 <HAL_RCC_GetSysClockFreq+0x200>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	099b      	lsrs	r3, r3, #6
 80012a4:	2200      	movs	r2, #0
 80012a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80012aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80012b2:	2300      	movs	r3, #0
 80012b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80012b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80012ba:	4622      	mov	r2, r4
 80012bc:	462b      	mov	r3, r5
 80012be:	f04f 0000 	mov.w	r0, #0
 80012c2:	f04f 0100 	mov.w	r1, #0
 80012c6:	0159      	lsls	r1, r3, #5
 80012c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012cc:	0150      	lsls	r0, r2, #5
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4621      	mov	r1, r4
 80012d4:	1a51      	subs	r1, r2, r1
 80012d6:	6139      	str	r1, [r7, #16]
 80012d8:	4629      	mov	r1, r5
 80012da:	eb63 0301 	sbc.w	r3, r3, r1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80012ec:	4659      	mov	r1, fp
 80012ee:	018b      	lsls	r3, r1, #6
 80012f0:	4651      	mov	r1, sl
 80012f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80012f6:	4651      	mov	r1, sl
 80012f8:	018a      	lsls	r2, r1, #6
 80012fa:	4651      	mov	r1, sl
 80012fc:	ebb2 0801 	subs.w	r8, r2, r1
 8001300:	4659      	mov	r1, fp
 8001302:	eb63 0901 	sbc.w	r9, r3, r1
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	f04f 0300 	mov.w	r3, #0
 800130e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001312:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001316:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800131a:	4690      	mov	r8, r2
 800131c:	4699      	mov	r9, r3
 800131e:	4623      	mov	r3, r4
 8001320:	eb18 0303 	adds.w	r3, r8, r3
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	462b      	mov	r3, r5
 8001328:	eb49 0303 	adc.w	r3, r9, r3
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800133a:	4629      	mov	r1, r5
 800133c:	024b      	lsls	r3, r1, #9
 800133e:	4621      	mov	r1, r4
 8001340:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001344:	4621      	mov	r1, r4
 8001346:	024a      	lsls	r2, r1, #9
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800134e:	2200      	movs	r2, #0
 8001350:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001352:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001354:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001358:	f7fe ff16 	bl	8000188 <__aeabi_uldivmod>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4613      	mov	r3, r2
 8001362:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001364:	e058      	b.n	8001418 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001366:	4b38      	ldr	r3, [pc, #224]	@ (8001448 <HAL_RCC_GetSysClockFreq+0x200>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	099b      	lsrs	r3, r3, #6
 800136c:	2200      	movs	r2, #0
 800136e:	4618      	mov	r0, r3
 8001370:	4611      	mov	r1, r2
 8001372:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001376:	623b      	str	r3, [r7, #32]
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
 800137c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001380:	4642      	mov	r2, r8
 8001382:	464b      	mov	r3, r9
 8001384:	f04f 0000 	mov.w	r0, #0
 8001388:	f04f 0100 	mov.w	r1, #0
 800138c:	0159      	lsls	r1, r3, #5
 800138e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001392:	0150      	lsls	r0, r2, #5
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4641      	mov	r1, r8
 800139a:	ebb2 0a01 	subs.w	sl, r2, r1
 800139e:	4649      	mov	r1, r9
 80013a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	f04f 0300 	mov.w	r3, #0
 80013ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80013b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80013b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80013b8:	ebb2 040a 	subs.w	r4, r2, sl
 80013bc:	eb63 050b 	sbc.w	r5, r3, fp
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	00eb      	lsls	r3, r5, #3
 80013ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013ce:	00e2      	lsls	r2, r4, #3
 80013d0:	4614      	mov	r4, r2
 80013d2:	461d      	mov	r5, r3
 80013d4:	4643      	mov	r3, r8
 80013d6:	18e3      	adds	r3, r4, r3
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	464b      	mov	r3, r9
 80013dc:	eb45 0303 	adc.w	r3, r5, r3
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80013ee:	4629      	mov	r1, r5
 80013f0:	028b      	lsls	r3, r1, #10
 80013f2:	4621      	mov	r1, r4
 80013f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80013f8:	4621      	mov	r1, r4
 80013fa:	028a      	lsls	r2, r1, #10
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001402:	2200      	movs	r2, #0
 8001404:	61bb      	str	r3, [r7, #24]
 8001406:	61fa      	str	r2, [r7, #28]
 8001408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800140c:	f7fe febc 	bl	8000188 <__aeabi_uldivmod>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4613      	mov	r3, r2
 8001416:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001418:	4b0b      	ldr	r3, [pc, #44]	@ (8001448 <HAL_RCC_GetSysClockFreq+0x200>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	0c1b      	lsrs	r3, r3, #16
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	3301      	adds	r3, #1
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001428:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800142a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800142c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001430:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001432:	e002      	b.n	800143a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001434:	4b05      	ldr	r3, [pc, #20]	@ (800144c <HAL_RCC_GetSysClockFreq+0x204>)
 8001436:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800143a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800143c:	4618      	mov	r0, r3
 800143e:	3750      	adds	r7, #80	@ 0x50
 8001440:	46bd      	mov	sp, r7
 8001442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	00f42400 	.word	0x00f42400
 8001450:	007a1200 	.word	0x007a1200

08001454 <memset>:
 8001454:	4402      	add	r2, r0
 8001456:	4603      	mov	r3, r0
 8001458:	4293      	cmp	r3, r2
 800145a:	d100      	bne.n	800145e <memset+0xa>
 800145c:	4770      	bx	lr
 800145e:	f803 1b01 	strb.w	r1, [r3], #1
 8001462:	e7f9      	b.n	8001458 <memset+0x4>

08001464 <__libc_init_array>:
 8001464:	b570      	push	{r4, r5, r6, lr}
 8001466:	4d0d      	ldr	r5, [pc, #52]	@ (800149c <__libc_init_array+0x38>)
 8001468:	4c0d      	ldr	r4, [pc, #52]	@ (80014a0 <__libc_init_array+0x3c>)
 800146a:	1b64      	subs	r4, r4, r5
 800146c:	10a4      	asrs	r4, r4, #2
 800146e:	2600      	movs	r6, #0
 8001470:	42a6      	cmp	r6, r4
 8001472:	d109      	bne.n	8001488 <__libc_init_array+0x24>
 8001474:	4d0b      	ldr	r5, [pc, #44]	@ (80014a4 <__libc_init_array+0x40>)
 8001476:	4c0c      	ldr	r4, [pc, #48]	@ (80014a8 <__libc_init_array+0x44>)
 8001478:	f000 f976 	bl	8001768 <_init>
 800147c:	1b64      	subs	r4, r4, r5
 800147e:	10a4      	asrs	r4, r4, #2
 8001480:	2600      	movs	r6, #0
 8001482:	42a6      	cmp	r6, r4
 8001484:	d105      	bne.n	8001492 <__libc_init_array+0x2e>
 8001486:	bd70      	pop	{r4, r5, r6, pc}
 8001488:	f855 3b04 	ldr.w	r3, [r5], #4
 800148c:	4798      	blx	r3
 800148e:	3601      	adds	r6, #1
 8001490:	e7ee      	b.n	8001470 <__libc_init_array+0xc>
 8001492:	f855 3b04 	ldr.w	r3, [r5], #4
 8001496:	4798      	blx	r3
 8001498:	3601      	adds	r6, #1
 800149a:	e7f2      	b.n	8001482 <__libc_init_array+0x1e>
 800149c:	08001798 	.word	0x08001798
 80014a0:	08001798 	.word	0x08001798
 80014a4:	08001798 	.word	0x08001798
 80014a8:	0800179c 	.word	0x0800179c

080014ac <__udivmoddi4>:
 80014ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014b0:	9d08      	ldr	r5, [sp, #32]
 80014b2:	460e      	mov	r6, r1
 80014b4:	4604      	mov	r4, r0
 80014b6:	460f      	mov	r7, r1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d14a      	bne.n	8001552 <__udivmoddi4+0xa6>
 80014bc:	4694      	mov	ip, r2
 80014be:	458c      	cmp	ip, r1
 80014c0:	fab2 f282 	clz	r2, r2
 80014c4:	d960      	bls.n	8001588 <__udivmoddi4+0xdc>
 80014c6:	b142      	cbz	r2, 80014da <__udivmoddi4+0x2e>
 80014c8:	f1c2 0320 	rsb	r3, r2, #32
 80014cc:	4097      	lsls	r7, r2
 80014ce:	fa20 f303 	lsr.w	r3, r0, r3
 80014d2:	fa0c fc02 	lsl.w	ip, ip, r2
 80014d6:	431f      	orrs	r7, r3
 80014d8:	4094      	lsls	r4, r2
 80014da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80014de:	fa1f f68c 	uxth.w	r6, ip
 80014e2:	fbb7 f1fe 	udiv	r1, r7, lr
 80014e6:	0c23      	lsrs	r3, r4, #16
 80014e8:	fb0e 7711 	mls	r7, lr, r1, r7
 80014ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80014f0:	fb01 f006 	mul.w	r0, r1, r6
 80014f4:	4298      	cmp	r0, r3
 80014f6:	d90a      	bls.n	800150e <__udivmoddi4+0x62>
 80014f8:	eb1c 0303 	adds.w	r3, ip, r3
 80014fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8001500:	f080 8115 	bcs.w	800172e <__udivmoddi4+0x282>
 8001504:	4298      	cmp	r0, r3
 8001506:	f240 8112 	bls.w	800172e <__udivmoddi4+0x282>
 800150a:	3902      	subs	r1, #2
 800150c:	4463      	add	r3, ip
 800150e:	1a1b      	subs	r3, r3, r0
 8001510:	b2a4      	uxth	r4, r4
 8001512:	fbb3 f0fe 	udiv	r0, r3, lr
 8001516:	fb0e 3310 	mls	r3, lr, r0, r3
 800151a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800151e:	fb00 f606 	mul.w	r6, r0, r6
 8001522:	42a6      	cmp	r6, r4
 8001524:	d90a      	bls.n	800153c <__udivmoddi4+0x90>
 8001526:	eb1c 0404 	adds.w	r4, ip, r4
 800152a:	f100 33ff 	add.w	r3, r0, #4294967295
 800152e:	f080 8100 	bcs.w	8001732 <__udivmoddi4+0x286>
 8001532:	42a6      	cmp	r6, r4
 8001534:	f240 80fd 	bls.w	8001732 <__udivmoddi4+0x286>
 8001538:	4464      	add	r4, ip
 800153a:	3802      	subs	r0, #2
 800153c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001540:	1ba4      	subs	r4, r4, r6
 8001542:	2100      	movs	r1, #0
 8001544:	b11d      	cbz	r5, 800154e <__udivmoddi4+0xa2>
 8001546:	40d4      	lsrs	r4, r2
 8001548:	2300      	movs	r3, #0
 800154a:	e9c5 4300 	strd	r4, r3, [r5]
 800154e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001552:	428b      	cmp	r3, r1
 8001554:	d905      	bls.n	8001562 <__udivmoddi4+0xb6>
 8001556:	b10d      	cbz	r5, 800155c <__udivmoddi4+0xb0>
 8001558:	e9c5 0100 	strd	r0, r1, [r5]
 800155c:	2100      	movs	r1, #0
 800155e:	4608      	mov	r0, r1
 8001560:	e7f5      	b.n	800154e <__udivmoddi4+0xa2>
 8001562:	fab3 f183 	clz	r1, r3
 8001566:	2900      	cmp	r1, #0
 8001568:	d146      	bne.n	80015f8 <__udivmoddi4+0x14c>
 800156a:	42b3      	cmp	r3, r6
 800156c:	d302      	bcc.n	8001574 <__udivmoddi4+0xc8>
 800156e:	4282      	cmp	r2, r0
 8001570:	f200 80f5 	bhi.w	800175e <__udivmoddi4+0x2b2>
 8001574:	1a84      	subs	r4, r0, r2
 8001576:	eb66 0203 	sbc.w	r2, r6, r3
 800157a:	2001      	movs	r0, #1
 800157c:	4617      	mov	r7, r2
 800157e:	2d00      	cmp	r5, #0
 8001580:	d0e5      	beq.n	800154e <__udivmoddi4+0xa2>
 8001582:	e9c5 4700 	strd	r4, r7, [r5]
 8001586:	e7e2      	b.n	800154e <__udivmoddi4+0xa2>
 8001588:	2a00      	cmp	r2, #0
 800158a:	f040 8093 	bne.w	80016b4 <__udivmoddi4+0x208>
 800158e:	eba1 030c 	sub.w	r3, r1, ip
 8001592:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001596:	fa1f fe8c 	uxth.w	lr, ip
 800159a:	2101      	movs	r1, #1
 800159c:	fbb3 f6f7 	udiv	r6, r3, r7
 80015a0:	fb07 3016 	mls	r0, r7, r6, r3
 80015a4:	0c23      	lsrs	r3, r4, #16
 80015a6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80015aa:	fb0e f006 	mul.w	r0, lr, r6
 80015ae:	4298      	cmp	r0, r3
 80015b0:	d908      	bls.n	80015c4 <__udivmoddi4+0x118>
 80015b2:	eb1c 0303 	adds.w	r3, ip, r3
 80015b6:	f106 38ff 	add.w	r8, r6, #4294967295
 80015ba:	d202      	bcs.n	80015c2 <__udivmoddi4+0x116>
 80015bc:	4298      	cmp	r0, r3
 80015be:	f200 80d0 	bhi.w	8001762 <__udivmoddi4+0x2b6>
 80015c2:	4646      	mov	r6, r8
 80015c4:	1a1b      	subs	r3, r3, r0
 80015c6:	b2a4      	uxth	r4, r4
 80015c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80015cc:	fb07 3310 	mls	r3, r7, r0, r3
 80015d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80015d4:	fb0e fe00 	mul.w	lr, lr, r0
 80015d8:	45a6      	cmp	lr, r4
 80015da:	d908      	bls.n	80015ee <__udivmoddi4+0x142>
 80015dc:	eb1c 0404 	adds.w	r4, ip, r4
 80015e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80015e4:	d202      	bcs.n	80015ec <__udivmoddi4+0x140>
 80015e6:	45a6      	cmp	lr, r4
 80015e8:	f200 80b6 	bhi.w	8001758 <__udivmoddi4+0x2ac>
 80015ec:	4618      	mov	r0, r3
 80015ee:	eba4 040e 	sub.w	r4, r4, lr
 80015f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80015f6:	e7a5      	b.n	8001544 <__udivmoddi4+0x98>
 80015f8:	f1c1 0720 	rsb	r7, r1, #32
 80015fc:	408b      	lsls	r3, r1
 80015fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8001602:	ea4c 0c03 	orr.w	ip, ip, r3
 8001606:	fa06 fe01 	lsl.w	lr, r6, r1
 800160a:	fa20 f407 	lsr.w	r4, r0, r7
 800160e:	fa26 f307 	lsr.w	r3, r6, r7
 8001612:	ea44 040e 	orr.w	r4, r4, lr
 8001616:	fa00 f801 	lsl.w	r8, r0, r1
 800161a:	ea4f 401c 	mov.w	r0, ip, lsr #16
 800161e:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8001622:	fbb3 fef0 	udiv	lr, r3, r0
 8001626:	fa1f f68c 	uxth.w	r6, ip
 800162a:	fb00 331e 	mls	r3, r0, lr, r3
 800162e:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8001632:	fb0e f906 	mul.w	r9, lr, r6
 8001636:	4599      	cmp	r9, r3
 8001638:	fa02 f201 	lsl.w	r2, r2, r1
 800163c:	d90b      	bls.n	8001656 <__udivmoddi4+0x1aa>
 800163e:	eb1c 0303 	adds.w	r3, ip, r3
 8001642:	f10e 3aff 	add.w	sl, lr, #4294967295
 8001646:	f080 8085 	bcs.w	8001754 <__udivmoddi4+0x2a8>
 800164a:	4599      	cmp	r9, r3
 800164c:	f240 8082 	bls.w	8001754 <__udivmoddi4+0x2a8>
 8001650:	f1ae 0e02 	sub.w	lr, lr, #2
 8001654:	4463      	add	r3, ip
 8001656:	eba3 0909 	sub.w	r9, r3, r9
 800165a:	b2a4      	uxth	r4, r4
 800165c:	fbb9 f3f0 	udiv	r3, r9, r0
 8001660:	fb00 9913 	mls	r9, r0, r3, r9
 8001664:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8001668:	fb03 f606 	mul.w	r6, r3, r6
 800166c:	42a6      	cmp	r6, r4
 800166e:	d908      	bls.n	8001682 <__udivmoddi4+0x1d6>
 8001670:	eb1c 0404 	adds.w	r4, ip, r4
 8001674:	f103 30ff 	add.w	r0, r3, #4294967295
 8001678:	d268      	bcs.n	800174c <__udivmoddi4+0x2a0>
 800167a:	42a6      	cmp	r6, r4
 800167c:	d966      	bls.n	800174c <__udivmoddi4+0x2a0>
 800167e:	3b02      	subs	r3, #2
 8001680:	4464      	add	r4, ip
 8001682:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001686:	1ba4      	subs	r4, r4, r6
 8001688:	fba0 e602 	umull	lr, r6, r0, r2
 800168c:	42b4      	cmp	r4, r6
 800168e:	4673      	mov	r3, lr
 8001690:	46b1      	mov	r9, r6
 8001692:	d352      	bcc.n	800173a <__udivmoddi4+0x28e>
 8001694:	d04f      	beq.n	8001736 <__udivmoddi4+0x28a>
 8001696:	b15d      	cbz	r5, 80016b0 <__udivmoddi4+0x204>
 8001698:	ebb8 0203 	subs.w	r2, r8, r3
 800169c:	eb64 0409 	sbc.w	r4, r4, r9
 80016a0:	fa04 f707 	lsl.w	r7, r4, r7
 80016a4:	fa22 f301 	lsr.w	r3, r2, r1
 80016a8:	431f      	orrs	r7, r3
 80016aa:	40cc      	lsrs	r4, r1
 80016ac:	e9c5 7400 	strd	r7, r4, [r5]
 80016b0:	2100      	movs	r1, #0
 80016b2:	e74c      	b.n	800154e <__udivmoddi4+0xa2>
 80016b4:	f1c2 0120 	rsb	r1, r2, #32
 80016b8:	fa20 f301 	lsr.w	r3, r0, r1
 80016bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80016c0:	fa26 f101 	lsr.w	r1, r6, r1
 80016c4:	4096      	lsls	r6, r2
 80016c6:	4333      	orrs	r3, r6
 80016c8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80016cc:	fa1f fe8c 	uxth.w	lr, ip
 80016d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80016d4:	fb07 1610 	mls	r6, r7, r0, r1
 80016d8:	0c19      	lsrs	r1, r3, #16
 80016da:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 80016de:	fb00 f60e 	mul.w	r6, r0, lr
 80016e2:	428e      	cmp	r6, r1
 80016e4:	fa04 f402 	lsl.w	r4, r4, r2
 80016e8:	d908      	bls.n	80016fc <__udivmoddi4+0x250>
 80016ea:	eb1c 0101 	adds.w	r1, ip, r1
 80016ee:	f100 38ff 	add.w	r8, r0, #4294967295
 80016f2:	d22d      	bcs.n	8001750 <__udivmoddi4+0x2a4>
 80016f4:	428e      	cmp	r6, r1
 80016f6:	d92b      	bls.n	8001750 <__udivmoddi4+0x2a4>
 80016f8:	3802      	subs	r0, #2
 80016fa:	4461      	add	r1, ip
 80016fc:	1b89      	subs	r1, r1, r6
 80016fe:	b29b      	uxth	r3, r3
 8001700:	fbb1 f6f7 	udiv	r6, r1, r7
 8001704:	fb07 1116 	mls	r1, r7, r6, r1
 8001708:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800170c:	fb06 f10e 	mul.w	r1, r6, lr
 8001710:	4299      	cmp	r1, r3
 8001712:	d908      	bls.n	8001726 <__udivmoddi4+0x27a>
 8001714:	eb1c 0303 	adds.w	r3, ip, r3
 8001718:	f106 38ff 	add.w	r8, r6, #4294967295
 800171c:	d214      	bcs.n	8001748 <__udivmoddi4+0x29c>
 800171e:	4299      	cmp	r1, r3
 8001720:	d912      	bls.n	8001748 <__udivmoddi4+0x29c>
 8001722:	3e02      	subs	r6, #2
 8001724:	4463      	add	r3, ip
 8001726:	1a5b      	subs	r3, r3, r1
 8001728:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
 800172c:	e736      	b.n	800159c <__udivmoddi4+0xf0>
 800172e:	4639      	mov	r1, r7
 8001730:	e6ed      	b.n	800150e <__udivmoddi4+0x62>
 8001732:	4618      	mov	r0, r3
 8001734:	e702      	b.n	800153c <__udivmoddi4+0x90>
 8001736:	45f0      	cmp	r8, lr
 8001738:	d2ad      	bcs.n	8001696 <__udivmoddi4+0x1ea>
 800173a:	ebbe 0302 	subs.w	r3, lr, r2
 800173e:	eb66 060c 	sbc.w	r6, r6, ip
 8001742:	3801      	subs	r0, #1
 8001744:	46b1      	mov	r9, r6
 8001746:	e7a6      	b.n	8001696 <__udivmoddi4+0x1ea>
 8001748:	4646      	mov	r6, r8
 800174a:	e7ec      	b.n	8001726 <__udivmoddi4+0x27a>
 800174c:	4603      	mov	r3, r0
 800174e:	e798      	b.n	8001682 <__udivmoddi4+0x1d6>
 8001750:	4640      	mov	r0, r8
 8001752:	e7d3      	b.n	80016fc <__udivmoddi4+0x250>
 8001754:	46d6      	mov	lr, sl
 8001756:	e77e      	b.n	8001656 <__udivmoddi4+0x1aa>
 8001758:	4464      	add	r4, ip
 800175a:	3802      	subs	r0, #2
 800175c:	e747      	b.n	80015ee <__udivmoddi4+0x142>
 800175e:	4608      	mov	r0, r1
 8001760:	e70d      	b.n	800157e <__udivmoddi4+0xd2>
 8001762:	3e02      	subs	r6, #2
 8001764:	4463      	add	r3, ip
 8001766:	e72d      	b.n	80015c4 <__udivmoddi4+0x118>

08001768 <_init>:
 8001768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800176a:	bf00      	nop
 800176c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800176e:	bc08      	pop	{r3}
 8001770:	469e      	mov	lr, r3
 8001772:	4770      	bx	lr

08001774 <_fini>:
 8001774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001776:	bf00      	nop
 8001778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800177a:	bc08      	pop	{r3}
 800177c:	469e      	mov	lr, r3
 800177e:	4770      	bx	lr
